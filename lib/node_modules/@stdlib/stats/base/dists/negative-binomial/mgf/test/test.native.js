/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var resolve = require( 'path' ).resolve;
var tryRequire = require( '@stdlib/utils/try-require' );


// VARIABLES //

var mgf = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( mgf instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
    t.ok( true, __filename );
    t.strictEqual( typeof mgf, 'function', 'main export is a function' );
    t.end();
});

tape( 'the function returns NaN if provided a NaN input for `t`', opts, function test( t ) {
    var y = mgf( NaN, 2.0, 0.5 );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );
    t.end();
});

tape( 'the function returns NaN if provided a NaN input for `r`', opts, function test( t ) {
    var y = mgf( 0.1, NaN, 0.5 );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );
    t.end();
});

tape( 'the function returns NaN if provided a NaN input for `p`', opts, function test( t ) {
    var y = mgf( 0.1, 2.0, NaN );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );
    t.end();
});

tape( 'the function evaluates the MGF for valid inputs', opts, function test( t ) {
    var y = mgf( 0.0, 1.0, 0.9 );
    t.strictEqual( y, 1.0, 'returns 1 when t is 0' );

    y = mgf( 0.05, 20.0, 0.8 );
    t.ok( Math.abs( y - 267.839 ) < 1e-3, 'returns ~267.839' );

    y = mgf( 0.1, 20.0, 0.1 );
    t.ok( Math.abs( y - 9.347 ) < 1e-3, 'returns ~9.347' );

    y = mgf( 0.5, 10.0, 0.4 );
    t.ok( Math.abs( y - 42822.023 ) < 1e-3, 'returns ~42822.023' );

    t.end();
});

tape( 'the function returns NaN if `p` is outside the interval [0,1]', opts, function test( t ) {
    var y = mgf( 0.1, 2.0, -0.5 );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );

    y = mgf( 0.1, 2.0, 1.5 );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );

    t.end();
});

tape( 'the function returns NaN if `r` is less than or equal to 0', opts, function test( t ) {
    var y = mgf( 0.1, -2.0, 0.5 );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );

    y = mgf( 0.1, 0.0, 0.5 );
    t.strictEqual( typeof y, 'number', 'returns a number' );
    t.ok( isNaN( y ), 'returns NaN' );

    t.end();
});
