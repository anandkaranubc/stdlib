/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var tryRequire = require( '@stdlib/utils/try-require' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

var pmf = tryRequire(resolve(__dirname, './../lib/native.js'));
var opts = {
	'skip': (pmf instanceof Error)
};


// TESTS //

tape('main export is a function', opts, function test(t) {
	t.ok(true, __filename);
	t.strictEqual(typeof pmf, 'function', 'main export is a function');
	t.end();
});

tape('if provided `NaN` for any parameter, the function returns `NaN`', opts, function test(t) {
	var v;

	v = pmf(NaN, 10, 5, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, NaN, 5, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10, NaN, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10, 5, NaN);
	t.equal(isnan(v), true, 'returns NaN');

	t.end();
});

tape('if provided invalid inputs, the function returns `NaN`', opts, function test(t) {
	var v;

	v = pmf(2, -10, 5, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10.5, 5, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10, -5, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10, 5.5, 2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10, 5, -2);
	t.equal(isnan(v), true, 'returns NaN');

	v = pmf(2, 10, 5, 2.5);
	t.equal(isnan(v), true, 'returns NaN');

	t.end();
});

tape('the function evaluates the PMF for a hypergeometric distribution', opts, function test(t) {
	var testCases = [{
		'x': 1.0,
		'N': 8,
		'K': 4,
		'n': 2,
		'expected': 0.571
	},
	{
		'x': 2.0,
		'N': 8,
		'K': 4,
		'n': 2,
		'expected': 0.214
	},
	{
		'x': 0.0,
		'N': 8,
		'K': 4,
		'n': 2,
		'expected': 0.214
	}];
	var tol = 1e-3;

	testCases.forEach(function evaluateTestCase(testCase) {
		var computedPMF = pmf(testCase.x, testCase.N, testCase.K, testCase.n);
		var delta = abs(computedPMF - testCase.expected);
		t.ok(delta <= tol, 'within tolerance. x: ' + testCase.x + ', N: ' + testCase.N + ', K: ' + testCase.K + ', n: ' + testCase.n + ', y: ' + computedPMF + ', expected: ' + testCase.expected + ', Î”: ' + delta + ', tol: ' + tol);
	});

	t.end();
});
