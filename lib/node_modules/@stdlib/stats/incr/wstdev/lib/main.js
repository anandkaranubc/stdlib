/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Returns an accumulator function which incrementally computes a weighted standard deviation.
*
* ## Method
*
* -   The weighted standard deviation is defined as
*
*     ```tex
*     \sigma = \sqrt{\frac{\sum_{i=0}^{n-1} w_i (x_i - \mu)^2}{\sum_{i=0}^{n-1} w_i}}
*     ```
*
*     where \( w_i \) are the weights and \( \mu \) is the weighted mean.
*
* -   To derive an incremental formula for computing a weighted standard deviation, let:
*
*     ```tex
*     W_n = \sum_{i=1}^{n} w_i
*     ```
*
* -   Accordingly:
*
*     ```tex
*     \begin{align*}
*     \sigma^2 &= \frac{1}{W_n} \sum_{i=1}^{n} w_i (x_i - \mu)^2 \\
*              &= \frac{1}{W_n} \sum_{i=1}^{n} w_i x_i^2 - \mu^2
*     \end{align*}
*     ```
*
* -   Let:
*
*     ```tex
*     M2_n = W_n \sigma^2_n = \sum_{i=1}^{n} w_i x_i^2 - W_n \mu_n^2
*     ```
*
* -   To compute the incremental update for \(M2_n\):
*
*     ```tex
*     \begin{align*}
*     M2_n - M2_{n-1} &= \sum_{i=1}^{n} w_i x_i^2 - W_n \mu_n^2 - \sum_{i=1}^{n-1} w_i x_i^2 + W_{n-1} \mu_{n-1}^2 \\
*                   &= w_n x_n^2 - W_n \mu_n^2 + W_{n-1} \mu_{n-1}^2 \\
*                   &= w_n x_n^2 - W_n \mu_n^2 + (W_n - w_n) \mu_{n-1}^2 \\
*                   &= w_n (x_n^2 - \mu_{n-1}^2) + W_n (\mu_{n-1}^2 - \mu_n^2)
*     \end{align*}
*     ```
*
* -   Simplify further:
*
*     ```tex
*     \begin{align*}
*     M2_n - M2_{n-1} &= w_n (x_n - \mu_{n-1}) (x_n - \mu_n) \\
*     M2_n &= M2_{n-1} + w_n (x_n - \mu_{n-1}) (x_n - \mu_n)
*     \end{align*}
*     ```
*
* -   Finally, compute the weighted standard deviation:
*
*     ```tex
*     \sigma_n = \sqrt{\frac{M2_n}{W_n}}
*     ```
*
* -   Incrementally updating the mean:
*
*     ```tex
*     \begin{align*}
*     \mu_n &= \mu_{n-1} + \frac{w_n}{W_n} (x_n - \mu_{n-1})
*     \end{align*}
*     ```
*
* Notation:
*
* -   \(W_n = \sum_{i=1}^{n} w_i\) is the cumulative sum of weights up to \(n\).
* -   \(\mu_n = \frac{1}{W_n} \sum_{i=1}^{n} w_i x_i\) is the weighted mean at step \(n\).
* -   \(M2_n\) is the cumulative sum of weighted squared deviations.
*
* @param {number} [mean] - mean value
* @throws {TypeError} must provide a number primitive
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrwstdev();
*
* var stdev = accumulator();
* // returns null
*
* stdev = accumulator( 2.0, 1.0 );
* // returns 0.0
*
* stdev = accumulator( 3.0, 2.0 );
* // returns ~0.471
*
* stdev = accumulator( 2.0, 0.1 );
* // returns ~0.478
*
* stdev = accumulator();
* // returns ~0.478
*
* @example
* var accumulator = incrwstdev( 3.0 );
*/
function incrwstdev( mean ) {
	var delta;
	var wsum;
	var FLG;
	var M2;
	var mu;

	wsum = 0.0;
	M2 = 0.0;
	if ( arguments.length ) {
		if ( !isNumber( mean ) ) {
			throw new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );
		}
		mu = mean;
		return accumulator2;
	}
	mu = 0.0;
	return accumulator1;

	/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - value
	* @param {number} [w] - weight
	* @returns {(number|null)} weighted standard deviation or null
	*/
	function accumulator1( x, w ) {
		if ( arguments.length === 0 ) {
			if ( FLG === void 0 ) {
				return null;
			}
			return sqrt( M2 / wsum );
		}
		FLG = true;
		delta = x - mu;
		wsum += w;
		mu += ( w / wsum ) * delta;
		M2 += w * delta * ( x - mu );
		return sqrt( M2 / wsum );
	}

	/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - value
	* @param {number} [w] - weight
	* @returns {(number|null)} weighted standard deviation or null
	*/
	function accumulator2( x, w ) {
		if ( arguments.length === 0 ) {
			if ( FLG === void 0 ) {
				return null;
			}
			return sqrt( M2 / wsum );
		}
		FLG = true;
		delta = x - mu;
		wsum += w;
		M2 += w * delta * delta;
		return sqrt( M2 / wsum );
	}
}


// EXPORTS //

module.exports = incrwstdev;
